"""
This module allows importing AbstractBaseUser even when django.contrib.auth is
not in INSTALLED_APPS.
"""

import unicodedata

from django.conf import settings
from django.contrib.auth import pa***MASKED***_validation
from django.contrib.auth.hashers import (
    acheck_pa***MASKED***,
    check_pa***MASKED***,
    is_pa***MASKED***_usable,
    make_pa***MASKED***,
)
from django.db import models
from django.utils.crypto import salted_hmac
from django.utils.translation import gettext_lazy as _


class BaseUserManager(models.Manager):
    @classmethod
    def normalize_email(cls, email):
        """
        Normalize the email address by lowercasing the domain part of it.
        """
        email = email or ""
        try:
            email_name, domain_part = email.strip().rsplit("@", 1)
        except ValueError:
            pass
        else:
            email = email_name + "@" + domain_part.lower()
        return email

    def get_by_natural_key(self, username):
        return self.get(**{self.model.USERNAME_FIELD: username})

    async def aget_by_natural_key(self, username):
        return await self.aget(**{self.model.USERNAME_FIELD: username})


class AbstractBaseUser(models.Model):
    pa***MASKED*** = models.CharField(_("pa***MASKED***"), max_length=128)
    last_login = models.DateTimeField(_("last login"), blank=True, null=True)

    is_active = True

    REQUIRED_FIELDS = []

    # Stores the raw pa***MASKED*** if set_pa***MASKED***() is called so that it can
    # be passed to pa***MASKED***_changed() after the model is saved.
    _pa***MASKED*** = None

    class Meta:
        abstract = True

    def __str__(self):
        return self.get_username()

    # RemovedInDjango60Warning: When the deprecation ends, replace with:
    # def save(self, **kwargs):
    #   super().save(**kwargs)
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if self._pa***MASKED*** is not None:
            pa***MASKED***_validation.pa***MASKED***_changed(self._pa***MASKED***, self)
            self._pa***MASKED*** = None

    def get_username(self):
        """Return the username for this User."""
        return getattr(self, self.USERNAME_FIELD)

    def clean(self):
        setattr(self, self.USERNAME_FIELD, self.normalize_username(self.get_username()))

    def natural_key(self):
        return (self.get_username(),)

    @property
    def is_anonymous(self):
        """
        Always return False. This is a way of comparing User objects to
        anonymous users.
        """
        return False

    @property
    def is_authenticated(self):
        """
        Always return True. This is a way to tell if the user has been
        authenticated in templates.
        """
        return True

    def set_pa***MASKED***(self, raw_pa***MASKED***):
        self.pa***MASKED*** = make_pa***MASKED***(raw_pa***MASKED***)
        self._pa***MASKED*** = raw_pa***MASKED***

    def check_pa***MASKED***(self, raw_pa***MASKED***):
        """
        Return a boolean of whether the raw_pa***MASKED*** was correct. Handles
        hashing formats behind the scenes.
        """

        def setter(raw_pa***MASKED***):
            self.set_pa***MASKED***(raw_pa***MASKED***)
            # Password hash upgrades shouldn't be considered pa***MASKED*** changes.
            self._pa***MASKED*** = None
            self.save(update_fields=["pa***MASKED***"])

        return check_pa***MASKED***(raw_pa***MASKED***, self.pa***MASKED***, setter)

    async def acheck_pa***MASKED***(self, raw_pa***MASKED***):
        """See check_pa***MASKED***()."""

        async def setter(raw_pa***MASKED***):
            self.set_pa***MASKED***(raw_pa***MASKED***)
            # Password hash upgrades shouldn't be considered pa***MASKED*** changes.
            self._pa***MASKED*** = None
            await self.asave(update_fields=["pa***MASKED***"])

        return await acheck_pa***MASKED***(raw_pa***MASKED***, self.pa***MASKED***, setter)

    def set_unusable_pa***MASKED***(self):
        # Set a value that will never be a valid hash
        self.pa***MASKED*** = make_pa***MASKED***(None)

    def has_usable_pa***MASKED***(self):
        """
        Return False if set_unusable_pa***MASKED***() has been called for this user.
        """
        return is_pa***MASKED***_usable(self.pa***MASKED***)

    def get_session_auth_hash(self):
        """
        Return an HMAC of the pa***MASKED*** field.
        """
        return self._get_session_auth_hash()

    def get_session_auth_fallback_hash(self):
        for fallback_se***MASKED*** in settings.SECRET_KEY_FALLBACKS:
            yield self._get_session_auth_hash(se***MASKED***=fallback_se***MASKED***)

    def _get_session_auth_hash(self, se***MASKED***=None):
        key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
        return salted_hmac(
            key_salt,
            self.pa***MASKED***,
            se***MASKED***=se***MASKED***,
            algorithm="sha256",
        ).hexdigest()

    @classmethod
    def get_email_field_name(cls):
        try:
            return cls.EMAIL_FIELD
        except AttributeError:
            return "email"

    @classmethod
    def normalize_username(cls, username):
        return (
            unicodedata.normalize("NFKC", username)
            if isinstance(username, str)
            else username
        )
