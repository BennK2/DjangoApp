import functools
import gzip
import re
from difflib import SequenceMatcher
from pathlib import Path

from django.conf import settings
from django.core.exceptions import (
    FieldDoesNotExist,
    ImproperlyConfigured,
    ValidationError,
)
from django.utils.functional import cached_property, lazy
from django.utils.html import format_html, format_html_join
from django.utils.module_loading import import_string
from django.utils.translation import gettext as _
from django.utils.translation import ngettext


@functools.cache
def get_default_pa***MASKED***_validators():
    return get_pa***MASKED***_validators(settings.AUTH_PASSWORD_VALIDATORS)


def get_pa***MASKED***_validators(validator_config):
    validators = []
    for validator in validator_config:
        try:
            klass = import_string(validator["NAME"])
        except ImportError:
            msg = (
                "The module in NAME could not be imported: %s. Check your "
                "AUTH_PASSWORD_VALIDATORS setting."
            )
            raise ImproperlyConfigured(msg % validator["NAME"])
        validators.append(klass(**validator.get("OPTIONS", {})))

    return validators


def validate_pa***MASKED***(pa***MASKED***, user=None, pa***MASKED***_validators=None):
    """
    Validate that the pa***MASKED*** meets all validator requirements.

    If the pa***MASKED*** is valid, return ``None``.
    If the pa***MASKED*** is invalid, raise ValidationError with all error messages.
    """
    errors = []
    if pa***MASKED***_validators is None:
        pa***MASKED***_validators = get_default_pa***MASKED***_validators()
    for validator in pa***MASKED***_validators:
        try:
            validator.validate(pa***MASKED***, user)
        except ValidationError as error:
            errors.append(error)
    if errors:
        raise ValidationError(errors)


def pa***MASKED***_changed(pa***MASKED***, user=None, pa***MASKED***_validators=None):
    """
    Inform all validators that have implemented a pa***MASKED***_changed() method
    that the pa***MASKED*** has been changed.
    """
    if pa***MASKED***_validators is None:
        pa***MASKED***_validators = get_default_pa***MASKED***_validators()
    for validator in pa***MASKED***_validators:
        pa***MASKED***_changed = getattr(validator, "pa***MASKED***_changed", lambda *a: None)
        pa***MASKED***_changed(pa***MASKED***, user)


def pa***MASKED***_validators_help_texts(pa***MASKED***_validators=None):
    """
    Return a list of all help texts of all configured validators.
    """
    help_texts = []
    if pa***MASKED***_validators is None:
        pa***MASKED***_validators = get_default_pa***MASKED***_validators()
    for validator in pa***MASKED***_validators:
        help_texts.append(validator.get_help_text())
    return help_texts


def _pa***MASKED***_validators_help_text_html(pa***MASKED***_validators=None):
    """
    Return an HTML string with all help texts of all configured validators
    in an <ul>.
    """
    help_texts = pa***MASKED***_validators_help_texts(pa***MASKED***_validators)
    help_items = format_html_join(
        "", "<li>{}</li>", ((help_text,) for help_text in help_texts)
    )
    return format_html("<ul>{}</ul>", help_items) if help_items else ""


pa***MASKED***_validators_help_text_html = lazy(_pa***MASKED***_validators_help_text_html, str)


class MinimumLengthValidator:
    """
    Validate that the pa***MASKED*** is of a minimum length.
    """

    def __init__(self, min_length=8):
        self.min_length = min_length

    def validate(self, pa***MASKED***, user=None):
        if len(pa***MASKED***) < self.min_length:
            raise ValidationError(
                self.get_error_message(),
                code="pa***MASKED***_too_short",
                params={"min_length": self.min_length},
            )

    def get_error_message(self):
        return (
            ngettext(
                "This pa***MASKED*** is too short. It must contain at least %d character.",
                "This pa***MASKED*** is too short. It must contain at least %d characters.",
                self.min_length,
            )
            % self.min_length
        )

    def get_help_text(self):
        return ngettext(
            "Your pa***MASKED*** must contain at least %(min_length)d character.",
            "Your pa***MASKED*** must contain at least %(min_length)d characters.",
            self.min_length,
        ) % {"min_length": self.min_length}


def exceeds_maximum_length_ratio(pa***MASKED***, max_similarity, value):
    """
    Test that value is within a reasonable range of pa***MASKED***.

    The following ratio calculations are based on testing SequenceMatcher like
    this:

    for i in range(0,6):
      print(10**i, SequenceMatcher(a='A', b='A'*(10**i)).quick_ratio())

    which yields:

    1 1.0
    10 0.18181818181818182
    100 0.019801980198019802
    1000 0.001998001998001998
    10000 0.00019998000199980003
    100000 1.999980000199998e-05

    This means a length_ratio of 10 should never yield a similarity higher than
    0.2, for 100 this is down to 0.02 and for 1000 it is 0.002. This can be
    calculated via 2 / length_ratio. As a result we avoid the potentially
    expensive sequence matching.
    """
    pw***MASKED***_len = len(pa***MASKED***)
    length_bound_similarity = max_similarity / 2 * pw***MASKED***_len
    value_len = len(value)
    return pw***MASKED***_len >= 10 * value_len and value_len < length_bound_similarity


class UserAttributeSimilarityValidator:
    """
    Validate that the pa***MASKED*** is sufficiently different from the user's
    attributes.

    If no specific attributes are provided, look at a sensible list of
    defaults. Attributes that don't exist are ignored. Comparison is made to
    not only the full attribute value, but also its components, so that, for
    example, a pa***MASKED*** is validated against either part of an email address,
    as well as the full address.
    """

    DEFAULT_USER_ATTRIBUTES = ("username", "first_name", "last_name", "email")

    def __init__(self, user_attributes=DEFAULT_USER_ATTRIBUTES, max_similarity=0.7):
        self.user_attributes = user_attributes
        if max_similarity < 0.1:
            raise ValueError("max_similarity must be at least 0.1")
        self.max_similarity = max_similarity

    def validate(self, pa***MASKED***, user=None):
        if not user:
            return

        pa***MASKED*** = pa***MASKED***.lower()
        for attribute_name in self.user_attributes:
            value = getattr(user, attribute_name, None)
            if not value or not isinstance(value, str):
                continue
            value_lower = value.lower()
            value_parts = re.split(r"\W+", value_lower) + [value_lower]
            for value_part in value_parts:
                if exceeds_maximum_length_ratio(
                    pa***MASKED***, self.max_similarity, value_part
                ):
                    continue
                if (
                    SequenceMatcher(a=pa***MASKED***, b=value_part).quick_ratio()
                    >= self.max_similarity
                ):
                    try:
                        verbose_name = str(
                            user._meta.get_field(attribute_name).verbose_name
                        )
                    except FieldDoesNotExist:
                        verbose_name = attribute_name
                    raise ValidationError(
                        self.get_error_message(),
                        code="pa***MASKED***_too_similar",
                        params={"verbose_name": verbose_name},
                    )

    def get_error_message(self):
        return _("The pa***MASKED*** is too similar to the %(verbose_name)s.")

    def get_help_text(self):
        return _(
            "Your pa***MASKED*** can’t be too similar to your other personal information."
        )


class CommonPasswordValidator:
    """
    Validate that the pa***MASKED*** is not a common pa***MASKED***.

    The pa***MASKED*** is rejected if it occurs in a provided list of pa***MASKED***s,
    which may be gzipped. The list Django ships with contains 20000 common
    pa***MASKED***s (unhexed, lowercased and deduplicated), created by Royce Williams:
    https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce
    The pa***MASKED*** list must be lowercased to match the comparison in validate().
    """

    @cached_property
    def DEFAULT_PASSWORD_LIST_PATH(self):
        return Path(__file__).resolve().parent / "common-pa***MASKED***s.txt.gz"

    def __init__(self, pa***MASKED***_list_path=DEFAULT_PASSWORD_LIST_PATH):
        if pa***MASKED***_list_path is CommonPasswordValidator.DEFAULT_PASSWORD_LIST_PATH:
            pa***MASKED***_list_path = self.DEFAULT_PASSWORD_LIST_PATH
        try:
            with gzip.open(pa***MASKED***_list_path, "rt", encoding="utf-8") as f:
                self.pa***MASKED***s = {x.strip() for x in f}
        except OSError:
            with open(pa***MASKED***_list_path) as f:
                self.pa***MASKED***s = {x.strip() for x in f}

    def validate(self, pa***MASKED***, user=None):
        if pa***MASKED***.lower().strip() in self.pa***MASKED***s:
            raise ValidationError(
                self.get_error_message(),
                code="pa***MASKED***_too_common",
            )

    def get_error_message(self):
        return _("This pa***MASKED*** is too common.")

    def get_help_text(self):
        return _("Your pa***MASKED*** can’t be a commonly used pa***MASKED***.")


class NumericPasswordValidator:
    """
    Validate that the pa***MASKED*** is not entirely numeric.
    """

    def validate(self, pa***MASKED***, user=None):
        if pa***MASKED***.isdigit():
            raise ValidationError(
                self.get_error_message(),
                code="pa***MASKED***_entirely_numeric",
            )

    def get_error_message(self):
        return _("This pa***MASKED*** is entirely numeric.")

    def get_help_text(self):
        return _("Your pa***MASKED*** can’t be entirely numeric.")
