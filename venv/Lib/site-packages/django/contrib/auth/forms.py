import logging
import unicodedata

from django import forms
from django.contrib.auth import authenticate, get_user_model, pa***MASKED***_validation
from django.contrib.auth.hashers import UNUSABLE_PASSWORD_PREFIX, identify_hasher
from django.contrib.auth.models import User
from django.contrib.auth.tokens import default_token_generator
from django.contrib.sites.shortcuts import get_current_site
from django.core.exceptions import ValidationError
from django.core.mail import EmailMultiAlternatives
from django.template import loader
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode
from django.utils.text import capfirst
from django.utils.translation import gettext
from django.utils.translation import gettext_lazy as _
from django.views.decorators.debug import sensitive_variables

UserModel = get_user_model()
logger = logging.getLogger("django.contrib.auth")


def _unicode_ci_compare(s1, s2):
    """
    Perform case-insensitive comparison of two identifiers, using the
    recommended algorithm from Unicode Technical Report 36, section
    2.11.2(B)(2).
    """
    return (
        unicodedata.normalize("NFKC", s1).casefold()
        == unicodedata.normalize("NFKC", s2).casefold()
    )


class ReadOnlyPasswordHashWidget(forms.Widget):
    template_name = "auth/widgets/read_only_pa***MASKED***_hash.html"
    read_only = True

    def get_context(self, name, value, attrs):
        context = super().get_context(name, value, attrs)
        usable_pa***MASKED*** = value and not value.startswith(UNUSABLE_PASSWORD_PREFIX)
        summary = []
        if usable_pa***MASKED***:
            try:
                hasher = identify_hasher(value)
            except ValueError:
                summary.append(
                    {
                        "label": gettext(
                            "Invalid pa***MASKED*** format or unknown hashing algorithm."
                        )
                    }
                )
            else:
                for key, value_ in hasher.safe_summary(value).items():
                    summary.append({"label": gettext(key), "value": value_})
        else:
            summary.append({"label": gettext("No pa***MASKED*** set.")})
        context["summary"] = summary
        context["button_label"] = (
            _("Reset pa***MASKED***") if usable_pa***MASKED*** else _("Set pa***MASKED***")
        )
        return context

    def id_for_label(self, id_):
        return None


class ReadOnlyPasswordHashField(forms.Field):
    widget = ReadOnlyPasswordHashWidget

    def __init__(self, *args, **kwargs):
        kwargs.setdefault("required", False)
        kwargs.setdefault("disabled", True)
        super().__init__(*args, **kwargs)


class UsernameField(forms.CharField):
    def to_python(self, value):
        value = super().to_python(value)
        if self.max_length is not None and len(value) > self.max_length:
            # Normalization can increase the string length (e.g.
            # "ﬀ" -> "ff", "½" -> "1⁄2") but cannot reduce it, so there is no
            # point in normalizing invalid data. Moreover, Unicode
            # normalization is very slow on Windows and can be a DoS attack
            # vector.
            return value
        return unicodedata.normalize("NFKC", value)

    def widget_attrs(self, widget):
        return {
            **super().widget_attrs(widget),
            "autocapitalize": "none",
            "autocomplete": "username",
        }


class SetPasswordMixin:
    """
    Form mixin that validates and sets a pa***MASKED*** for a user.
    """

    error_messages = {
        "pa***MASKED***_mismatch": _("The two pa***MASKED*** fields didn’t match."),
    }

    @staticmethod
    def create_pa***MASKED***_fields(label1=_("Password"), label2=_("Password confirmation")):
        pa***MASKED***1 = forms.CharField(
            label=label1,
            required=True,
            strip=False,
            widget=forms.PasswordInput(attrs={"autocomplete": "new-pa***MASKED***"}),
            help_text=pa***MASKED***_validation.pa***MASKED***_validators_help_text_html(),
        )
        pa***MASKED***2 = forms.CharField(
            label=label2,
            required=True,
            widget=forms.PasswordInput(attrs={"autocomplete": "new-pa***MASKED***"}),
            strip=False,
            help_text=_("Enter the same pa***MASKED*** as before, for verification."),
        )
        return pa***MASKED***1, pa***MASKED***2

    @sensitive_variables("pa***MASKED***1", "pa***MASKED***2")
    def validate_pa***MASKED***s(
        self,
        pa***MASKED***1_field_name="pa***MASKED***1",
        pa***MASKED***2_field_name="pa***MASKED***2",
    ):
        pa***MASKED***1 = self.cleaned_data.get(pa***MASKED***1_field_name)
        pa***MASKED***2 = self.cleaned_data.get(pa***MASKED***2_field_name)

        if pa***MASKED***1 and pa***MASKED***2 and pa***MASKED***1 != pa***MASKED***2:
            error = ValidationError(
                self.error_messages["pa***MASKED***_mismatch"],
                code="pa***MASKED***_mismatch",
            )
            self.add_error(pa***MASKED***2_field_name, error)

    @sensitive_variables("pa***MASKED***")
    def validate_pa***MASKED***_for_user(self, user, pa***MASKED***_field_name="pa***MASKED***2"):
        pa***MASKED*** = self.cleaned_data.get(pa***MASKED***_field_name)
        if pa***MASKED***:
            try:
                pa***MASKED***_validation.validate_pa***MASKED***(pa***MASKED***, user)
            except ValidationError as error:
                self.add_error(pa***MASKED***_field_name, error)

    def set_pa***MASKED***_and_save(self, user, pa***MASKED***_field_name="pa***MASKED***1", commit=True):
        user.set_pa***MASKED***(self.cleaned_data[pa***MASKED***_field_name])
        if commit:
            user.save()
        return user


class SetUnusablePasswordMixin:
    """
    Form mixin that allows setting an unusable pa***MASKED*** for a user.

    This mixin should be used in combination with `SetPasswordMixin`.
    """

    usable_pa***MASKED***_help_text = _(
        "Whether the user will be able to authenticate using a pa***MASKED*** or not. "
        "If disabled, they may still be able to authenticate using other backends, "
        "such as Single Sign-On or LDAP."
    )

    @staticmethod
    def create_usable_pa***MASKED***_field(help_text=usable_pa***MASKED***_help_text):
        return forms.ChoiceField(
            label=_("Password-based authentication"),
            required=False,
            initial="true",
            choices={"true": _("Enabled"), "false": _("Disabled")},
            widget=forms.RadioSelect(attrs={"class": "radiolist inline"}),
            help_text=help_text,
        )

    @sensitive_variables("pa***MASKED***1", "pa***MASKED***2")
    def validate_pa***MASKED***s(
        self,
        pa***MASKED***1_field_name="pa***MASKED***1",
        pa***MASKED***2_field_name="pa***MASKED***2",
        usable_pa***MASKED***_field_name="usable_pa***MASKED***",
    ):
        usable_pa***MASKED*** = (
            self.cleaned_data.pop(usable_pa***MASKED***_field_name, None) != "false"
        )
        self.cleaned_data["set_usable_pa***MASKED***"] = usable_pa***MASKED***

        if not usable_pa***MASKED***:
            return

        pa***MASKED***1 = self.cleaned_data.get(pa***MASKED***1_field_name)
        pa***MASKED***2 = self.cleaned_data.get(pa***MASKED***2_field_name)

        if not pa***MASKED***1 and pa***MASKED***1_field_name not in self.errors:
            error = ValidationError(
                self.fields[pa***MASKED***1_field_name].error_messages["required"],
                code="required",
            )
            self.add_error(pa***MASKED***1_field_name, error)

        if not pa***MASKED***2 and pa***MASKED***2_field_name not in self.errors:
            error = ValidationError(
                self.fields[pa***MASKED***2_field_name].error_messages["required"],
                code="required",
            )
            self.add_error(pa***MASKED***2_field_name, error)

        super().validate_pa***MASKED***s(pa***MASKED***1_field_name, pa***MASKED***2_field_name)

    def validate_pa***MASKED***_for_user(self, user, **kwargs):
        if self.cleaned_data["set_usable_pa***MASKED***"]:
            super().validate_pa***MASKED***_for_user(user, **kwargs)

    def set_pa***MASKED***_and_save(self, user, commit=True, **kwargs):
        if self.cleaned_data["set_usable_pa***MASKED***"]:
            user = super().set_pa***MASKED***_and_save(user, **kwargs, commit=commit)
        else:
            user.set_unusable_pa***MASKED***()
            if commit:
                user.save()
        return user


class BaseUserCreationForm(SetPasswordMixin, forms.ModelForm):
    """
    A form that creates a user, with no privileges, from the given username and
    pa***MASKED***.

    This is the documented base class for customizing the user creation form.
    It should be kept mostly unchanged to ensure consistency and compatibility.
    """

    pa***MASKED***1, pa***MASKED***2 = SetPasswordMixin.create_pa***MASKED***_fields()

    class Meta:
        model = User
        fields = ("username",)
        field_classes = {"username": UsernameField}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self._meta.model.USERNAME_FIELD in self.fields:
            self.fields[self._meta.model.USERNAME_FIELD].widget.attrs[
                "autofocus"
            ] = True

    def clean(self):
        self.validate_pa***MASKED***s()
        return super().clean()

    def _post_clean(self):
        super()._post_clean()
        # Validate the pa***MASKED*** after self.instance is updated with form data
        # by super().
        self.validate_pa***MASKED***_for_user(self.instance)

    def save(self, commit=True):
        user = super().save(commit=False)
        user = self.set_pa***MASKED***_and_save(user, commit=commit)
        if commit and hasattr(self, "save_m2m"):
            self.save_m2m()
        return user


class UserCreationForm(BaseUserCreationForm):
    def clean_username(self):
        """Reject usernames that differ only in case."""
        username = self.cleaned_data.get("username")
        if (
            username
            and self._meta.model.objects.filter(username__iexact=username).exists()
        ):
            self._update_errors(
                ValidationError(
                    {
                        "username": self.instance.unique_error_message(
                            self._meta.model, ["username"]
                        )
                    }
                )
            )
        else:
            return username


class UserChangeForm(forms.ModelForm):
    pa***MASKED*** = ReadOnlyPasswordHashField(
        label=_("Password"),
        help_text=_(
            "Raw pa***MASKED***s are not stored, so there is no way to see "
            "the user’s pa***MASKED***."
        ),
    )

    class Meta:
        model = User
        fields = "__all__"
        field_classes = {"username": UsernameField}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        pa***MASKED*** = self.fields.get("pa***MASKED***")
        if pa***MASKED***:
            if self.instance and not self.instance.has_usable_pa***MASKED***():
                pa***MASKED***.help_text = _(
                    "Enable pa***MASKED***-based authentication for this user by setting a "
                    "pa***MASKED***."
                )
        user_permissions = self.fields.get("user_permissions")
        if user_permissions:
            user_permissions.queryset = user_permissions.queryset.select_related(
                "content_type"
            )


class AuthenticationForm(forms.Form):
    """
    Base class for authenticating users. Extend this to get a form that accepts
    username/pa***MASKED*** logins.
    """

    username = UsernameField(widget=forms.TextInput(attrs={"autofocus": True}))
    pa***MASKED*** = forms.CharField(
        label=_("Password"),
        strip=False,
        widget=forms.PasswordInput(attrs={"autocomplete": "current-pa***MASKED***"}),
    )

    error_messages = {
        "invalid_login": _(
            "Please enter a correct %(username)s and pa***MASKED***. Note that both "
            "fields may be case-sensitive."
        ),
        "inactive": _("This account is inactive."),
    }

    def __init__(self, request=None, *args, **kwargs):
        """
        The 'request' parameter is set for custom auth use by subclasses.
        The form data comes in via the standard 'data' kwarg.
        """
        self.request = request
        self.user_cache = None
        super().__init__(*args, **kwargs)

        # Set the max length and label for the "username" field.
        self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)
        username_max_length = self.username_field.max_length or 254
        self.fields["username"].max_length = username_max_length
        self.fields["username"].widget.attrs["maxlength"] = username_max_length
        if self.fields["username"].label is None:
            self.fields["username"].label = capfirst(self.username_field.verbose_name)

    @sensitive_variables()
    def clean(self):
        username = self.cleaned_data.get("username")
        pa***MASKED*** = self.cleaned_data.get("pa***MASKED***")

        if username is not None and pa***MASKED***:
            self.user_cache = authenticate(
                self.request, username=username, pa***MASKED***=pa***MASKED***
            )
            if self.user_cache is None:
                raise self.get_invalid_login_error()
            else:
                self.confirm_login_allowed(self.user_cache)

        return self.cleaned_data

    def confirm_login_allowed(self, user):
        """
        Controls whether the given User may log in. This is a policy setting,
        independent of end-user authentication. This default behavior is to
        allow login by active users, and reject login by inactive users.

        If the given user cannot log in, this method should raise a
        ``ValidationError``.

        If the given user may log in, this method should return None.
        """
        if not user.is_active:
            raise ValidationError(
                self.error_messages["inactive"],
                code="inactive",
            )

    def get_user(self):
        return self.user_cache

    def get_invalid_login_error(self):
        return ValidationError(
            self.error_messages["invalid_login"],
            code="invalid_login",
            params={"username": self.username_field.verbose_name},
        )


class PasswordResetForm(forms.Form):
    email = forms.EmailField(
        label=_("Email"),
        max_length=254,
        widget=forms.EmailInput(attrs={"autocomplete": "email"}),
    )

    def send_mail(
        self,
        subject_template_name,
        email_template_name,
        context,
        from_email,
        to_email,
        html_email_template_name=None,
    ):
        """
        Send a django.core.mail.EmailMultiAlternatives to `to_email`.
        """
        subject = loader.render_to_string(subject_template_name, context)
        # Email subject *must not* contain newlines
        subject = "".join(subject.splitlines())
        body = loader.render_to_string(email_template_name, context)

        email_message = EmailMultiAlternatives(subject, body, from_email, [to_email])
        if html_email_template_name is not None:
            html_email = loader.render_to_string(html_email_template_name, context)
            email_message.attach_alternative(html_email, "text/html")

        try:
            email_message.send()
        except Exception:
            logger.exception(
                "Failed to send pa***MASKED*** reset email to %s", context["user"].pk
            )

    def get_users(self, email):
        """Given an email, return matching user(s) who should receive a reset.

        This allows subclasses to more easily customize the default policies
        that prevent inactive users and users with unusable pa***MASKED***s from
        resetting their pa***MASKED***.
        """
        email_field_name = UserModel.get_email_field_name()
        active_users = UserModel._default_manager.filter(
            **{
                "%s__iexact" % email_field_name: email,
                "is_active": True,
            }
        )
        return (
            u
            for u in active_users
            if u.has_usable_pa***MASKED***()
            and _unicode_ci_compare(email, getattr(u, email_field_name))
        )

    def save(
        self,
        domain_override=None,
        subject_template_name="registration/pa***MASKED***_reset_subject.txt",
        email_template_name="registration/pa***MASKED***_reset_email.html",
        use_https=False,
        token_generator=default_token_generator,
        from_email=None,
        request=None,
        html_email_template_name=None,
        extra_email_context=None,
    ):
        """
        Generate a one-use only link for resetting pa***MASKED*** and send it to the
        user.
        """
        email = self.cleaned_data["email"]
        if not domain_override:
            current_site = get_current_site(request)
            site_name = current_site.name
            domain = current_site.domain
        else:
            site_name = domain = domain_override
        email_field_name = UserModel.get_email_field_name()
        for user in self.get_users(email):
            user_email = getattr(user, email_field_name)
            user_pk_bytes = force_bytes(UserModel._meta.pk.value_to_string(user))
            context = {
                "email": user_email,
                "domain": domain,
                "site_name": site_name,
                "uid": urlsafe_base64_encode(user_pk_bytes),
                "user": user,
                "token": token_generator.make_token(user),
                "protocol": "https" if use_https else "http",
                **(extra_email_context or {}),
            }
            self.send_mail(
                subject_template_name,
                email_template_name,
                context,
                from_email,
                user_email,
                html_email_template_name=html_email_template_name,
            )


class SetPasswordForm(SetPasswordMixin, forms.Form):
    """
    A form that lets a user set their pa***MASKED*** without entering the old
    pa***MASKED***
    """

    new_pa***MASKED***1, new_pa***MASKED***2 = SetPasswordMixin.create_pa***MASKED***_fields(
        label1=_("New pa***MASKED***"), label2=_("New pa***MASKED*** confirmation")
    )

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super().__init__(*args, **kwargs)

    def clean(self):
        self.validate_pa***MASKED***s("new_pa***MASKED***1", "new_pa***MASKED***2")
        self.validate_pa***MASKED***_for_user(self.user, "new_pa***MASKED***2")
        return super().clean()

    def save(self, commit=True):
        return self.set_pa***MASKED***_and_save(self.user, "new_pa***MASKED***1", commit=commit)


class PasswordChangeForm(SetPasswordForm):
    """
    A form that lets a user change their pa***MASKED*** by entering their old
    pa***MASKED***.
    """

    error_messages = {
        **SetPasswordForm.error_messages,
        "pa***MASKED***_incorrect": _(
            "Your old pa***MASKED*** was entered incorrectly. Please enter it again."
        ),
    }
    old_pa***MASKED*** = forms.CharField(
        label=_("Old pa***MASKED***"),
        strip=False,
        widget=forms.PasswordInput(
            attrs={"autocomplete": "current-pa***MASKED***", "autofocus": True}
        ),
    )

    field_order = ["old_pa***MASKED***", "new_pa***MASKED***1", "new_pa***MASKED***2"]

    @sensitive_variables("old_pa***MASKED***")
    def clean_old_pa***MASKED***(self):
        """
        Validate that the old_pa***MASKED*** field is correct.
        """
        old_pa***MASKED*** = self.cleaned_data["old_pa***MASKED***"]
        if not self.user.check_pa***MASKED***(old_pa***MASKED***):
            raise ValidationError(
                self.error_messages["pa***MASKED***_incorrect"],
                code="pa***MASKED***_incorrect",
            )
        return old_pa***MASKED***


class AdminPasswordChangeForm(SetUnusablePasswordMixin, SetPasswordMixin, forms.Form):
    """
    A form used to change the pa***MASKED*** of a user in the admin interface.
    """

    required_css_class = "required"
    usable_pa***MASKED***_help_text = SetUnusablePasswordMixin.usable_pa***MASKED***_help_text + (
        '<ul id="id_unusable_warning" class="messagelist"><li class="warning">'
        "If disabled, the current pa***MASKED*** for this user will be lost.</li></ul>"
    )
    pa***MASKED***1, pa***MASKED***2 = SetPasswordMixin.create_pa***MASKED***_fields()

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super().__init__(*args, **kwargs)
        self.fields["pa***MASKED***1"].widget.attrs["autofocus"] = True
        if self.user.has_usable_pa***MASKED***():
            self.fields["pa***MASKED***1"].required = False
            self.fields["pa***MASKED***2"].required = False
            self.fields["usable_pa***MASKED***"] = (
                SetUnusablePasswordMixin.create_usable_pa***MASKED***_field(
                    self.usable_pa***MASKED***_help_text
                )
            )

    def clean(self):
        self.validate_pa***MASKED***s()
        self.validate_pa***MASKED***_for_user(self.user)
        return super().clean()

    def save(self, commit=True):
        """Save the new pa***MASKED***."""
        return self.set_pa***MASKED***_and_save(self.user, commit=commit)

    @property
    def changed_data(self):
        data = super().changed_data
        if "set_usable_pa***MASKED***" in data or "pa***MASKED***1" in data and "pa***MASKED***2" in data:
            return ["pa***MASKED***"]
        return []


class AdminUserCreationForm(SetUnusablePasswordMixin, UserCreationForm):

    usable_pa***MASKED*** = SetUnusablePasswordMixin.create_usable_pa***MASKED***_field()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields["pa***MASKED***1"].required = False
        self.fields["pa***MASKED***2"].required = False
